// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: query.sql

package tutorial

import (
	"context"
)

const createCliente = `-- name: CreateCliente :one
INSERT INTO Clientes (nombre, apellido, email, telefono)
VALUES ($1, $2, $3, $4)
RETURNING id_cliente, nombre, apellido, email, telefono
`

type CreateClienteParams struct {
	Nombre   string
	Apellido string
	Email    string
	Telefono string
}

func (q *Queries) CreateCliente(ctx context.Context, arg CreateClienteParams) (Cliente, error) {
	row := q.db.QueryRowContext(ctx, createCliente,
		arg.Nombre,
		arg.Apellido,
		arg.Email,
		arg.Telefono,
	)
	var i Cliente
	err := row.Scan(
		&i.IDCliente,
		&i.Nombre,
		&i.Apellido,
		&i.Email,
		&i.Telefono,
	)
	return i, err
}

const deleteCliente = `-- name: DeleteCliente :exec
DELETE FROM Clientes
WHERE ID_Cliente = $1
`

func (q *Queries) DeleteCliente(ctx context.Context, idCliente int32) error {
	_, err := q.db.ExecContext(ctx, deleteCliente, idCliente)
	return err
}

const getCliente = `-- name: GetCliente :one
SELECT id_cliente, nombre, apellido, email, telefono FROM Clientes
WHERE ID_Cliente = $1 LIMIT 1
`

func (q *Queries) GetCliente(ctx context.Context, idCliente int32) (Cliente, error) {
	row := q.db.QueryRowContext(ctx, getCliente, idCliente)
	var i Cliente
	err := row.Scan(
		&i.IDCliente,
		&i.Nombre,
		&i.Apellido,
		&i.Email,
		&i.Telefono,
	)
	return i, err
}

const listClientes = `-- name: ListClientes :many
SELECT id_cliente, nombre, apellido, email, telefono FROM Clientes
ORDER BY name
`

func (q *Queries) ListClientes(ctx context.Context) ([]Cliente, error) {
	rows, err := q.db.QueryContext(ctx, listClientes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Cliente
	for rows.Next() {
		var i Cliente
		if err := rows.Scan(
			&i.IDCliente,
			&i.Nombre,
			&i.Apellido,
			&i.Email,
			&i.Telefono,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
