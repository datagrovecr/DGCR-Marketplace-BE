// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: query.sql

package laborosoDB

import (
	"context"
)

const createClient = `-- name: CreateClient :one
INSERT INTO clients (name, lastName, email, phone)
VALUES ($1, $2, $3, $4)
RETURNING id_client, passport, id_card, name, lastname, country, email, phone, dimex
`

type CreateClientParams struct {
	Name     string
	Lastname string
	Email    string
	Phone    int32
}

func (q *Queries) CreateClient(ctx context.Context, arg CreateClientParams) (Client, error) {
	row := q.db.QueryRowContext(ctx, createClient,
		arg.Name,
		arg.Lastname,
		arg.Email,
		arg.Phone,
	)
	var i Client
	err := row.Scan(
		&i.IDClient,
		&i.Passport,
		&i.IDCard,
		&i.Name,
		&i.Lastname,
		&i.Country,
		&i.Email,
		&i.Phone,
		&i.Dimex,
	)
	return i, err
}

const deleteClient = `-- name: DeleteClient :exec
DELETE FROM clients
WHERE id_client = $1
`

func (q *Queries) DeleteClient(ctx context.Context, idClient int32) error {
	_, err := q.db.ExecContext(ctx, deleteClient, idClient)
	return err
}

const getClient = `-- name: GetClient :one
SELECT id_client, passport, id_card, name, lastname, country, email, phone, dimex FROM clients
WHERE id_client = $1 LIMIT 1
`

func (q *Queries) GetClient(ctx context.Context, idClient int32) (Client, error) {
	row := q.db.QueryRowContext(ctx, getClient, idClient)
	var i Client
	err := row.Scan(
		&i.IDClient,
		&i.Passport,
		&i.IDCard,
		&i.Name,
		&i.Lastname,
		&i.Country,
		&i.Email,
		&i.Phone,
		&i.Dimex,
	)
	return i, err
}

const listClients = `-- name: ListClients :many
SELECT id_client, passport, id_card, name, lastname, country, email, phone, dimex FROM clients
ORDER BY name
`

func (q *Queries) ListClients(ctx context.Context) ([]Client, error) {
	rows, err := q.db.QueryContext(ctx, listClients)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Client
	for rows.Next() {
		var i Client
		if err := rows.Scan(
			&i.IDClient,
			&i.Passport,
			&i.IDCard,
			&i.Name,
			&i.Lastname,
			&i.Country,
			&i.Email,
			&i.Phone,
			&i.Dimex,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
